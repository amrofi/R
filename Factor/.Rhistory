library("pacman")
install.packages("pacman")
knitr::opts_chunk$set(echo = TRUE)
library(pacman)
p_load(corpcor, GPArotation, psych, ggplot2, foreign, tidyverse)
install.packages(c("corpcor", "ggplot2", "GPArotation", "psych", "tidyverse"))
install.packages(c("corpcor", "ggplot2", "GPArotation", "psych", "tidyverse"))
knitr::opts_chunk$set(echo = TRUE)
library(pacman)
p_load(corpcor, GPArotation, psych, ggplot2, foreign, tidyverse)
## read in file with working directory set to file location
# read in spss .sav file and view data frame
wisc_data <- read.spss("wiscsem.sav", to.data.frame = TRUE)
head(wisc_data)
Read(wisc_data)
View(wisc_data)
wisc_data_1 <- wisc_data[,-c(1,2)]
head(wisc_data_1)
wisc_cor <- cor(wisc_data_1)
wisc_cor
wisc_cor2 <- round(cor(wisc_data_1), 2)
wisc_cor2
# arguments are the correlation matrix object and sample size n of the dataset
wisc_bart = cortest.bartlett(wisc_cor, n = nrow(wisc_data_1))
wisc_bart
# argument is the correlation matrix object
KMO(wisc_cor)
# argument is the correlation matrix object
det(wisc_cor)
# syntax format to run principal components analysis
# form: principal(dataframe or R matrix, nfactors = number of factors, rotate = "method of rotation",
# scores = TRUE or FALSE)
# nfactors - how many factors/components to extract; default is 1
# rotate - allows for specification of a particular rotation method; default is varimax
# scores - allows factors scores to be obtained or not; default is FALSE (no scores)
# example of a model created using raw data
# this model will extract the same number of factors as variables, without rotation
wisc_pca <- principal(wisc_data_1, nfactors = 11, rotate = "none")
wisc_pca
wisc_pca$values
plot(wisc_pca$values, type = "o")
fa.parallel(wisc_data_1, n.obs=175, fm="ml", fa="both", n.iter=300, error.bars = TRUE, se.bars = TRUE, show.legend=TRUE, main="Scree plot with parallel analysis")
wisc_pca_1 <- principal(wisc_data_1, nfactors = 3, rotate = "varimax")
wisc_pca_1
wisc_data_2 <- wisc_data_1[,-11] #retains all rows, removes column 11
head(wisc_data_2)
wisc_pca_2 <- principal(wisc_data_2, nfactors = 2, rotate = "varimax")
wisc_pca_2
wisc_pca_2$values
plot(wisc_pca_2$values, type = "o")
wisc_cor_actual <- cor(wisc_data_2)
wisc_cor_actual
wisc_cor_resid <- factor.residuals(wisc_cor_actual, wisc_pca_2$loadings)
# extract upper diagonal from residual correlation object as first column of new matrix
#as.matrix returns value as a matrix
resid_upper <- as.matrix(wisc_cor_resid[upper.tri(wisc_cor_resid)])
resid_upper
# abs() calculates the absolute value for object in argument
resid_magnitude <- abs(resid_upper) > 0.05
sum(resid_magnitude)
# nrow calculates the number of rows in a data frame or matrix
sum(resid_magnitude)/nrow(resid_upper)
sqrt(mean(resid_upper^2))
hist(resid_upper)
wisc_cor_reproduced <- factor.model(wisc_pca_2$loadings)
wisc_cor_reproduced
# create factor analysis model as object
# form: fa(dataframe or R matrix, nfactors = number of factors, rotate = "method of rotation", scores = TRUE or FALSE, fm = "factor method")
# nfactors - how many factors/components to extract; default is 1
# rotate - allows for specification of a particular rotation method; default is varimax
# scores - allows factors scores to be obtained or not; default is FALSE (no scores)
# fm - allows for a factor method to be specified, e.g. maximum likelihood is "ml", principal axis is “pa”
wisc_fa <- fa(wisc_data_2, nfactors = 2, rotate = "oblimin", fm = "ml")
wisc_fa
# alternative syntax for using a correlation matrix as input for same analysis
# my.fa2 <- fa(my.cor10, nfactors = 2, rotate = "oblimin", fm = "pa")
print.psych(wisc_fa, cut = .3, sort = TRUE)
# create factor analysis model as object
# form: fa(dataframe or R matrix, nfactors = number of factors, rotate = "method of rotation", scores = TRUE or FALSE, fm = "factor method")
# nfactors - how many factors/components to extract; default is 1
# rotate - allows for specification of a particular rotation method; default is varimax
# scores - allows factors scores to be obtained or not; default is FALSE (no scores)
# fm - allows for a factor method to be specified, e.g. maximum likelihood is "ml", principal axis is “pa”
wisc_fa <- fa(wisc_data_2, nfactors = 2, rotate = "oblimin", fm = "ml")
wisc_fa
# alternative syntax for using a correlation matrix as input for same analysis
# my.fa2 <- fa(my.cor10, nfactors = 2, rotate = "oblimin", fm = "pa")
install.packages(c("lavaan", "semPlot"))
knitr::opts_chunk$set(echo = TRUE)
# Clear your Global Environment
rm(list=ls())
# Load libraries
library(psych)
library(lavaan)
library(semPlot)
# Read data
dat <- read.csv("Unsworth2014.csv", header = T)
dim(dat)
View(dat)
describe(dat[,-1])
round(cor(dat[,-1]),2)
##(Thanks to Jean-paul Snijder)
# Load Library
library(ggplot2)
## Scatter Plot Matrix with histogram diagonals and r/CI95 on the top panels (Run top to bottom from here)
## Histograms on the diagonal (Thanks to Ane Handles)
panel.hist <- function(x, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col="lavender", ...)
}
## Correlations & 95% CIs on the upper panels (Thanks to Ane Handles) + p-values
panel.cor <- function(x, y, digits=2, prefix="", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- cor(x, y,use="complete.obs")
txt <- format(c(r, 0.123456789), digits=digits)[1]
prefix <- "r = "
rc <- cor.test(x,y)
rci <- rc$conf.int
p <- cor.test(x, y)$p.value
txt4 <- format(c(p, 0.123456789), digits = digits)[1]
txt4 <- paste(",\np= ", txt4, sep = "")
if(p<0.01) txt4 <- paste(",\np= ", "<0.01", sep = "")
txt2 <- format(c(rci, 0.123456789), digits=digits)[1]
txt3 <- format(c(rci, 0.123456789), digits=digits)[2]
prefix2 <- "\nCI = "
txt <- paste(prefix, txt, prefix2, txt2, ", ", txt3, sep="", txt4)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = 1)
}
##(Thanks to Jean-paul Snijder)
# Load Library
library(ggplot2)
## Scatter Plot Matrix with histogram diagonals and r/CI95 on the top panels (Run top to bottom from here)
## Histograms on the diagonal (Thanks to Ane Handles)
panel.hist <- function(x, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col="lavender", ...)
}
## Correlations & 95% CIs on the upper panels (Thanks to Ane Handles) + p-values
panel.cor <- function(x, y, digits=2, prefix="", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- cor(x, y,use="complete.obs")
txt <- format(c(r, 0.123456789), digits=digits)[1]
prefix <- "r = "
rc <- cor.test(x,y)
rci <- rc$conf.int
p <- cor.test(x, y)$p.value
txt4 <- format(c(p, 0.123456789), digits = digits)[1]
txt4 <- paste(",\np= ", txt4, sep = "")
if(p<0.01) txt4 <- paste(",\np= ", "<0.01", sep = "")
txt2 <- format(c(rci, 0.123456789), digits=digits)[1]
txt3 <- format(c(rci, 0.123456789), digits=digits)[2]
prefix2 <- "\nCI = "
txt <- paste(prefix, txt, prefix2, txt2, ", ", txt3, sep="", txt4)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = 1)
}
pairs(dat[2:8],
lower.panel=panel.smooth, cex = .8, pch = 21, bg="steelblue",
diag.panel=panel.hist, cex.labels = 1.2, font.labels=2,
upper.panel=panel.cor)
modelfig2 <- '# Latent variables
wms =~ ospan + symspan + rspan
capacity =~ color + shape + space + orient + motion + colorK + shapek
ac =~ anti + drop48 + rel2
sm =~ picsource + pa + dfrp
gF =~ raven + ns + cf
# Correlations among latent variables
wms ~~ capacity
wms ~~ ac
wms ~~ sm
wms ~~ gF
capacity ~~ ac
capacity ~~ sm
capacity ~~ gF
ac ~~ sm
ac ~~ gF
sm ~~ gF
# Residuals for manifest variables
ospan~~ospan
symspan~~symspan
rspan~~rspan
color~~color
shape~~shape
space~~space
orient~~orient
motion~~motion
colorK~~colorK
shapek~~shapek
anti~~anti
drop48~~drop48
rel2~~rel2
picsource~~picsource
pa~~pa
dfrp~~dfrp
raven~~raven
ns~~ns
cf~~cf
# Correlated residuals
colorK ~~ shapek
# Variances for latent variables
wms~~1*wms
capacity~~1*capacity
ac~~1*ac
sm~~1*sm
gF~~1*gF'
# Run the model
fitfig2 <- lavaan(modelfig2, data = dat)
# Get parameter estiamtes and fit statistics
summary(fitfig2, fit.measures = TRUE, standardized = TRUE)
# Draw the model
semPaths(fitfig2, what = "std", layout = "circle", sizeMan = 4, sizeLat = 3)
?function
dcd
?pairs
