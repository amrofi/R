update.packages(ask='graphics',checkBuilt=TRUE)
installr
load("installr")
library("installr")
updateR()
q()
library(psych)
library(jmv)
library(summarytools)
?ttestIS
dat_A <- read.csv("https://www.dropbox.com/s/mhcbxwwb6rofcuy/independent.A.csv?dl=1")
View(dat_A)
View(dat_A)
desc <- descriptives(dat_A, vars = c('Marketing_Ideas'), hist = TRUE, sd = TRUE, se = TRUE, skew = TRUE, kurt = TRUE)
desc <- descriptives(dat_A, vars = c('Marketing_Ideas'), hist = TRUE, sd = TRUE, se = TRUE, skew = TRUE, kurt = TRUE)
desc
class(desc)
class(dat_A)
groupdesc <- descriptives(dat_A, vars = c('Marketing_Ideas'), splitBy = 'Group', hist = TRUE, sd = TRUE, se = TRUE, skew = TRUE, kurt = TRUE)
groupdesc
dat_A$Group <- as.factor(dat_A$Group)
ttestIS(data = dat_A, vars = 'Marketing_Ideas', group = 'Group', eqv = TRUE, effectSize = TRUE, ci = TRUE, desc = TRUE)
library(ggplot2)
library(plyr)
# creating this function will allow you to generate summary stats needed for visualization - mean scores, standard error, etc. It's super useful - keep it handy, you'll see it a lot.
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
library(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
install.packages('ggplot2')
install.packages('plyr')
# creating this function will allow you to generate summary stats needed for visualization - mean scores, standard error, etc. It's super useful - keep it handy, you'll see it a lot.
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
library(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
# Saving the summary data to call when putting in the ggplot2 code for the graph (for geom_errorbar).
sumdat <- summarySE(dat_A, measurevar="Marketing_Ideas", groupvars=c("Group"))
# Saving the summary data to call when putting in the ggplot2 code for the graph (for geom_errorbar).
sumdat <- summarySE(dat_A, measurevar="Marketing_Ideas", groupvars=c("Group"))
# creation of the bar graph - including specifications such as the color (#GoDodgers), title, addition of error bars, etc.
bar1 <- ggplot(sumdat, aes(x = Group, y = Marketing_Ideas)) +
geom_bar(stat='identity', fill = 'dodgerblue3') +
theme_minimal() +
geom_errorbar(aes(ymin=Marketing_Ideas-se, ymax=Marketing_Ideas+se), width = .1)
bar1 + ggtitle('Marketing Ideas by Training Program')
knitr::opts_chunk$set(echo = TRUE)
library(psych)
library(jmv)
setwd("C:/Users/p1n3d/R/.git")
setwd("C:/Users/p1n3d/R")
dat_A <- read.csv("https://www.dropbox.com/s/155ouxhzbcjqw7f/dependent.A.csv?dl=1")
View(dat_A)
desc <- descriptives(dat_A, vars = c('Before_Weight', 'After_Weight'), hist = TRUE, sd = TRUE, se = TRUE, skew = TRUE, kurt = TRUE)
desc
dat_A$diff <- (dat_A$After_Weight - dat_A$Before_Weight)
desc <- descriptives(dat_A, vars = c('diff'), hist = TRUE, sd = TRUE, se = TRUE, skew = TRUE, kurt = TRUE)
desc
ttestPS(data = dat_A, pairs = list(list(i1='Before_Weight', i2='After_Weight')), effectSize = TRUE, ci = TRUE, desc = TRUE)
dat_B <- read.csv("https://www.dropbox.com/s/ht1asp6uqwf5z1w/dependent.B.csv?dl=1")
View(dat_B)
desc.b <- descriptives(dat_B, vars = c('Weight_Before', 'Weight_After'), hist = TRUE, sd = TRUE, se = TRUE, skew = TRUE, kurt = TRUE)
desc.b
dat_B$diff <- (dat_B$Weight_After - dat_B$Weight_Before)
desc.b <- descriptives(dat_B, vars = c('diff'), hist = TRUE, sd = TRUE, se = TRUE, skew = TRUE, kurt = TRUE)
desc.b
ttestPS(data = dat_B, pairs = list(list(i1='Weight_Before', i2='Weight_After')), effectSize = TRUE, ci = TRUE, desc = TRUE)
dat_C <- read.csv("https://www.dropbox.com/s/awtdtf9cgwgf747/dependent.C.csv?dl=1")
View(dat_C)
desc.c <- descriptives(dat_C, vars = c('Before_Weight', 'After_Weight'), hist = TRUE, sd = TRUE, se = TRUE, skew = TRUE, kurt = TRUE)
desc.c
hist(dat_C$Before_Weight)
hist(dat_C$After_Weight)
dat_C$diff <- (dat_C$After_Weight - dat_C$Before_Weight)
desc.c <- descriptives(dat_C, vars = c('diff'), hist = TRUE, sd = TRUE, se = TRUE, skew = TRUE, kurt = TRUE)
desc.c
hist(dat_C$diff)
ttestPS(data = dat_C, pairs = list(list(i1='Before_Weight', i2='After_Weight')), effectSize = TRUE, ci = TRUE, desc = TRUE)
unlink('Demo Dep t_cache', recursive = TRUE)
